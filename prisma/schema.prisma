// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid()) @map("_id")
  username       String   @unique
  imageUrl       String
  externalUserId String   @unique
  bio            String?


  followers Follow[] @relation("UserFollowers") 
  following Follow[] @relation("UserFollowing") 

  blockedUsers Block[] @relation("Blocking")
  blockedByUsers Block[] @relation("BlockedBy")

  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String @id @default(uuid()) @map("_id")
  followerId  String
  followingId String

  follower User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([followerId])
  @@index([followingId])

  @@unique([followerId, followingId])
}


model Block{
  id          String @id @default(uuid()) @map("_id")
  blockerId   String
  blockedId   String

  blocker User @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([blockerId])
  @@index([blockedId])

  @@unique([blockerId, blockedId])
}


model Stream {
  id          String   @id @default(uuid()) @map("_id")
  name       String 
  thumbnailUrl String?

  ingressId String? @unique
  serverUrl String?
  streamKey String?

  isLive   Boolean  @default(false)
  isChatEnabled Boolean @default(true)
  isChatDelayed Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@fulltext([name])
}